[project]
name = "problemspotter"
version = "1.0.0"
description = "A tool for fetching Reddit posts containing 'how do I' phrases"
authors = [{name = "ProblemSpotter Team"}]
requires-python = ">=3.13"
readme = "README.md"
license = {text = "MIT"}
dependencies = [
    "praw>=7.7.0",
    "python-dotenv>=1.0.0",
    "pydantic>=2.0.0",
    "openai>=1.16.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.1.0",
    "black>=24.1.0",
    "isort>=5.13.2",
    "ruff>=0.2.1",
    "mypy>=1.8.0",
    "pyright>=1.1.348",
    "pre-commit>=3.6.0",
    "types-requests>=2.31.0",
    "types-setuptools>=69.0.0",
    "mdformat>=0.7.17",
    "mdformat-gfm>=0.3.5",
    "mdformat-black>=0.1.1",
    "tomli>=2.0.1",
]

[build-system]
requires = ["setuptools>=61.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.pyright]
typeCheckingMode = "strict"
reportMissingImports = true
reportMissingTypeStubs = true
reportUnknownMemberType = true
reportUnknownArgumentType = true
reportUnknownVariableType = true
reportUnknownParameterType = true
reportUntypedFunctionDecorator = true
reportUntypedClassDecorator = true
reportPrivateUsage = "warning"
reportImplicitStringConcatenation = true
reportInvalidTypeVarUse = true
reportUnnecessaryCast = true
reportConstantRedefinition = true
reportUnnecessaryTypeIgnoreComment = true
reportIncompleteStub = true
exclude = ["tests"]

# External packages that don't have type stubs
stubPath = "./typings"

[[tool.pyright.overrides]]
include = ["tests/**/*.py"]
reportUnknownMemberType = false
reportUnknownArgumentType = false
reportUnknownVariableType = false
reportUnknownParameterType = false

[[tool.pyright.overrides]]
include = ["typings/**/*.pyi"]
reportUnusedImport = false
reportMissingParameterType = false
reportUnknownParameterType = false
reportUnknownMemberType = false
reportUnknownVariableType = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_functions = "test_*"
addopts = "--strict-markers --cov=. --cov-report=term --cov-report=xml"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.black]
line-length = 100
target-version = ["py312"]
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | typings
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
py_version = 312

[tool.ruff]
line-length = 100
target-version = "py312"
extend-exclude = ["typings"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "I",   # isort
    "C4",  # flake8-comprehensions
    "B",   # flake8-bugbear
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "D",   # pydocstyle
    "PL",  # pylint
    "RUF", # ruff-specific rules
    "S",   # flake8-bandit (security)
]
ignore = [
    "D203", "D213",  # Conflicts with D212
    "PLR0913",       # Too many arguments in function definition
    "S105", "S106",  # Possible hardcoded password (acceptable in tests)
    "B010",          # Do not call setattr with constant attribute
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "F401", "E402", "S101", "D",  # More relaxed rules for tests
    "PLR2004",  # Magic value in comparison (acceptable in tests)
    "PLR0915",  # Too many statements (acceptable in tests)
    "B009",     # Allow getattr with constant attribute (needed for testing dynamic attributes)
]
"typings/**/*.pyi" = ["F401", "D"]  # Allow unused imports in stub files

[tool.ruff.lint.isort]
known-first-party = ["fetch_problems"]

[tool.ruff.lint.pydocstyle]
convention = "google"  # Enforce Google-style docstrings

[tool.ruff.lint.mccabe]
max-complexity = 10  # Set a reasonable complexity threshold

[tool.ruff.lint.pylint]
max-args = 6  # Maximum number of arguments for functions/methods
max-returns = 3  # Maximum number of return statements

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false
